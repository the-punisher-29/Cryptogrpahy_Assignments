#!/usr/bin/env python3
import hashlib
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad

# These are the values extracted from the intercepted data.
p = int("2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919")
g = 2
# Alice's public value (A) and Bob's public value (B) are given
A = int("539556019868756019035615487062583764545019803793635712947528463889304486869497162061335997527971977050049337464152478479265992127749780103259420400564906895897077512359628760656227084039215210033374611483959802841868892445902197049235745933150328311259162433075155095844532813412268773066318780724878693701177217733659861396010057464019948199892231790191103752209797118863201066964703008895947360077614198735382678809731252084194135812256359294228383696551949882")
B = int("652888676809466256406904653886313023288609075262748718135045355786028783611182379919130347165201199876762400523413029908630805888567578414109983228590188758171259420566830374793540891937904402387134765200478072915215871011267065310188328883039327167068295517693269989835771255162641401501080811953709743259493453369152994501213224841052509818015422338794357540968552645357127943400146625902468838113443484208599332251406190345653880206706388377388164982846343351")
iv = "c044059ae57b61821a9090fbdefc63c5"
encrypted_flag = "f60522a95bde87a9ff00dc2c3d99177019f625f3364188c1058183004506bf96541cf241dad1c0e92535564e537322d7"

# In the vulnerable script, Bob computes his public value as:
#      B = (g ^ b) % p
# where ^ is the bitwise XOR. With g = 2 we can recover Bob's secret b as:
b_val = 2 ^ B
# And then the shared secret is computed as:
#      shared_secret = (A ^ b) % p
shared_secret = (A ^ b_val) % p

# Derive the AES key from the shared secret:
key = hashlib.sha1(str(shared_secret).encode('ascii')).digest()[:16]

# Decrypt the flag.
cipher = AES.new(key, AES.MODE_CBC, bytes.fromhex(iv))
decrypted = cipher.decrypt(bytes.fromhex(encrypted_flag))

try:
    flag = unpad(decrypted, AES.block_size).decode('ascii')
except ValueError:
    flag = decrypted.rstrip(b'\x00').decode('ascii')

print("Enter flag here:", flag)